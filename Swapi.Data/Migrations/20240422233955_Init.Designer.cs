// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swapi.Data;

#nullable disable

namespace Swapi.Data.Migrations
{
    [DbContext(typeof(StarWarsDbContext))]
    [Migration("20240422233955_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Swapi.Data.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Episode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpeningCrawl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Swapi.Data.FilmPlanet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("PlanetId");

                    b.ToTable("FilmPlanet");
                });

            modelBuilder.Entity("Swapi.Data.FilmStarship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StarshipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("StarshipId");

                    b.ToTable("FilmStarship");
                });

            modelBuilder.Entity("Swapi.Data.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BirthYear")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HairColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HomeWorldId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SkinColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HomeWorldId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Swapi.Data.PersonFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonFilm");
                });

            modelBuilder.Entity("Swapi.Data.PersonPlanet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("PersonPlanet");
                });

            modelBuilder.Entity("Swapi.Data.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Climate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Diameter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gravity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrbitalPeriod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Population")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RotationSpeed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceWater")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("Swapi.Data.Starship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CargoCapacity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Consumables")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CostInCredits")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Crew")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HyperDriveRating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxAtmospheringSpeed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Megalights")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Passengers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StarshipClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Starships");
                });

            modelBuilder.Entity("Swapi.Data.FilmPlanet", b =>
                {
                    b.HasOne("Swapi.Data.Film", null)
                        .WithMany("Planets")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swapi.Data.Planet", null)
                        .WithMany("Films")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swapi.Data.FilmStarship", b =>
                {
                    b.HasOne("Swapi.Data.Film", null)
                        .WithMany("Starships")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swapi.Data.Starship", null)
                        .WithMany("Films")
                        .HasForeignKey("StarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swapi.Data.Person", b =>
                {
                    b.HasOne("Swapi.Data.Planet", "HomeWorld")
                        .WithMany()
                        .HasForeignKey("HomeWorldId");

                    b.Navigation("HomeWorld");
                });

            modelBuilder.Entity("Swapi.Data.PersonFilm", b =>
                {
                    b.HasOne("Swapi.Data.Film", null)
                        .WithMany("Persons")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swapi.Data.Person", null)
                        .WithMany("Films")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swapi.Data.PersonPlanet", b =>
                {
                    b.HasOne("Swapi.Data.Planet", null)
                        .WithMany("People")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swapi.Data.Film", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Planets");

                    b.Navigation("Starships");
                });

            modelBuilder.Entity("Swapi.Data.Person", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("Swapi.Data.Planet", b =>
                {
                    b.Navigation("Films");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Swapi.Data.Starship", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
